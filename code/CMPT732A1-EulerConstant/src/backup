package org.CMPT732A1;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.math.BigDecimal;
import java.util.Random;
import java.util.StringTokenizer;

//import org.apache.hadoop.conf.Configuration;
//import org.apache.hadoop.conf.Configured;
//import org.apache.hadoop.fs.FileContext;
//import org.apache.hadoop.fs.FileSystem;
//import org.apache.hadoop.fs.Path;
//import org.apache.hadoop.io.IntWritable;
//import org.apache.hadoop.io.LongWritable;
//import org.apache.hadoop.io.SequenceFile;
//import org.apache.hadoop.io.SequenceFile.Writer.Option;
//import org.apache.hadoop.io.Text;
//import org.apache.hadoop.io.Writable;
//import org.apache.hadoop.mapred.SequenceFileInputFormat;
//import org.apache.hadoop.mapred.SequenceFileOutputFormat;
//import org.apache.hadoop.mapreduce.Job;
//import org.apache.hadoop.mapreduce.Mapper;
//import org.apache.hadoop.mapreduce.Mapper.Context;
//import org.apache.hadoop.mapreduce.Reducer;
//import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
//import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
//import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
//import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
//import org.apache.hadoop.util.Tool;
//import org.apache.hadoop.util.ToolRunner;




import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileContext;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.SequenceFile.Writer.Option;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class EulersConstant extends Configured implements Tool {

    static private final Path TMP_DIR = new Path(EulersConstant.class.getSimpleName() + "_tmp");

    public static class EMapper extends Mapper<LongWritable, LongWritable, IntWritable, IntWritable> {
    	double sum = 0;
    	int n = 0;
    	private final static IntWritable one = new IntWritable(1);
    	
        @Override
        protected void map(LongWritable key, LongWritable value,
        		Context context)
        		throws IOException, InterruptedException {
        	// TODO Auto-generated method stub
        	
        	Random rnd = new Random();
        	long seed = key.get();
        	long numSample = value.get();
        	rnd.setSeed(seed);
        
        	System.out.println("Mapper Seed value: " + seed);
        	System.out.println("Number of Sample: " + numSample);
        	for(long i = 0; i < numSample; i++){
	        	while (sum <=1){
	        		sum += rnd.nextDouble();
	        		n ++;
	        	}
	        	context.write(new IntWritable(n), one);
	        	System.out.println("Found n = "+ n );
	        	
        	}
        	
        	
        	
        }
    }

    public static class EReducer extends Reducer<IntWritable, IntWritable, IntWritable, IntWritable> {

    	
        @Override
        protected void reduce(IntWritable n, Iterable<IntWritable> ts, Context context)
                throws IOException, InterruptedException {
            // TODO: write me
        	
        	int total = 0;
        	for (IntWritable val: ts){
        		total += val.get(); 
        	}
        	System.out.println("Debug: This is a reducer.");
        	context.write(n, new IntWritable(total));
        	
        	
        	
        }
    }

    public static BigDecimal estimate(int numMaps, long numPoints, Job job)
            throws IOException, ClassNotFoundException, InterruptedException {

        // Job parameters
        job.setJarByClass(EulersConstant.class);

        job.setMapperClass(EMapper.class);
        job.setReducerClass(EReducer.class);
        job.setMapOutputKeyClass(IntWritable.class);
        job.setMapOutputValueClass(IntWritable.class);
        
        
        job.setOutputKeyClass(IntWritable.class);
        job.setOutputValueClass(IntWritable.class);

        job.setInputFormatClass(SequenceFileInputFormat.class);
        job.setOutputFormatClass(SequenceFileOutputFormat.class);
        
        job.setNumReduceTasks(1);

        // Input and output paths
        Path inDir = new Path(TMP_DIR, "in");
        Path outDir = new Path(TMP_DIR, "out");
        FileInputFormat.setInputPaths(job, inDir);
        FileOutputFormat.setOutputPath(job, outDir);

        // Create the temporary directory in which the input and output files are stored
        FileSystem fs = FileSystem.get(job.getConfiguration());
//        FileContext fc = FileContext.getFileContext(job.getConfiguration());
        if (fs.exists(TMP_DIR)) {
            throw new IOException("Temporary directory " + fs.makeQualified(TMP_DIR)
                    + " already exists.  Please remove it first.");
        }
        if (!fs.mkdirs(inDir)) {
            throw new IOException("Cannot create input directory " + inDir);
        }

        // TODO: Generate one file for each map
        Random rnd = new Random();

        
        SequenceFile.Writer writer = null;
        
        
        for (int i=1;i <= numMaps;i++){
        	
        	Long seed = rnd.nextLong();
         	
        	
		    
    		try {
//    			SequenceFile.Writer writer =
//    		            new SequenceFile.Writer(job.getConfiguration(), SequenceFile.Writer.file(new Path(inDir, "")));
//    			String filename = "input" + String.valueOf(i);
//    			inputFile = new File(inDir.toString() + "/" + filename);
//    		    writer = new BufferedWriter(new OutputStreamWriter(
//    		          new FileOutputStream(inDir + ""+ filename), "utf-8"));
//    			Option file_option = SequenceFile.Writer.file(new Path(inDir, "mapConfig_"+Integer.toString(i)));
//    			Option keyclass_option = SequenceFile.Writer.keyClass(LongWritable.class);
//    			Option valueclass_option = SequenceFile.Writer.valueClass(LongWritable.class);
    			writer =
//            			SequenceFile.createWriter(fc,job.getConfiguration(), new Path(inDir, "mapConfig_"+Integer.toString(i)), keyclass_option, valueclass_option);
    		            new SequenceFile.Writer(fs,job.getConfiguration(), new Path(inDir, "mapConfig_"+Integer.toString(i)), LongWritable.class, LongWritable.class);
    		
    			writer.append(new LongWritable(seed), new LongWritable(numPoints));
    			System.out.println("Written Seed: "+ seed);
    		    System.out.println("Written numSample: "+numPoints);
    		          
    		} catch (IOException ex) {
    		  System.out.println("File written error: "+ex.toString());
    		} finally {
    		   try {writer.close();} catch (Exception ex) {
    			   System.out.println("File Close error!!!!!!!!!!!");
    		   }
    		}
    		}

        // Start the job
        System.out.println("Starting Job");
        long startTime = System.currentTimeMillis();
        job.waitForCompletion(true);
        double duration = (System.currentTimeMillis() - startTime) / 1000.0;
        System.out.println("Job Finished in " + duration + " seconds");

        // Read the results and compute the value of Euler's constant
       
        SequenceFile.Reader reader =
            new SequenceFile.Reader(job.getConfiguration(), SequenceFile.Reader.file(new Path(TMP_DIR, "out/part-r-00000")));
        // TODO: Compute and return the result
        IntWritable key = new IntWritable();
        IntWritable val = new IntWritable();

        while (reader.next(key, val)) {
            System.out.println(key + "\t" + val);
        }
        reader.close();
        
        return new BigDecimal(1);
    }

    public int run(String[] args) throws Exception {

        if (args.length != 2) {
            System.err.println("Usage: " + getClass().getName() + " <nMaps> <nSamples>");
            ToolRunner.printGenericCommandUsage(System.err);
            return -1;
        }

        int nMaps = Integer.parseInt(args[0]);
        long nSamples = Long.parseLong(args[1]);
        

        System.out.println("Number of Maps  = " + nMaps);
        System.out.println("Samples per Map = " + nSamples);

        Job job = Job.getInstance(new Configuration());
        System.out.println("Estimated value of Euler's Constant = "
                           + estimate(nMaps, nSamples, job));
        return 0;
    }

    public static void main(String[] argv) throws Exception {
        System.exit(ToolRunner.run(null, new EulersConstant(), argv));
    }
}

